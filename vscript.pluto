-- Thanks Hexa for the sweet updater
local auto_update_config = {
    source_url="https://raw.githubusercontent.com/vythrp/vscript/main/vscript.pluto",
    script_relpath=SCRIPT_RELPATH,
}

util.ensure_package_is_installed('lua/auto-updater')
local auto_updater = require('auto-updater')
if auto_updater == true and not is_from_repository then
    auto_updater.run_auto_update(auto_update_config)
end

util.require_natives("3095a.g")

local vscript = menu.my_root()
menu.divider(vscript, "vscript")

local wide_view = 70
local narrow_view = 55
local better_radar_enabled = false
local prev_is_drifting = false
local history_size = 10
local not_drifting_delay_frames = 15
local vx_history = {}
local vy_history = {}
local frames_not_drifting = 0
local is_drifting = false
local drift_angle = 0
local drift_start_time = 0
local min_drift_speed = 25
local current_drift_score = 0
local highest_drift_score = 0
local PI = math.pi
local SQRT_3_2 = SQRT(3) / 2
local hud_opacity_factor = 255
local frame_rate = 30

menu.trigger_commands("sleekminimap on")


local colors = {}

local function update_colors()
    -- Adjusted to mimic C4 Corvette instrument cluster colors
    colors.black = {
        ["r"] = 2/255,
        ["g"] = 3/255,
        ["b"] = 4/255,
        ["a"] = 0.8 * (hud_opacity_factor / 255)
    }

    colors.white = {
        ["r"] = 1.0,
        ["g"] = 1.0,
        ["b"] = 1.0,
        ["a"] = 0.15 * (hud_opacity_factor / 255)
    }

    colors.bright_white = {
        ["r"] = 1.0,
        ["g"] = 1.0,
        ["b"] = 1.0,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.yellow = {
        ["r"] = 253 / 255,
        ["g"] = 249 / 255,
        ["b"] = 51 / 255,
        ["a"] = 0.5 * (hud_opacity_factor / 255)
    }

    colors.bright_yellow = {
        ["r"] = 253 / 255,
        ["g"] = 249 / 255,
        ["b"] = 51 / 255,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.gold = {
        ["r"] = 1.0,
        ["g"] = 156/255,
        ["b"] = 30/255,
        ["a"] = 0.4 * (hud_opacity_factor / 255)
    }


    colors.bright_gold = {
        ["r"] = 1.0,
        ["g"] = 156/255,
        ["b"] = 30/255,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.green = {
        ["r"] = 137/255,
        ["g"] = 252/255,
        ["b"] = 0/255,
        ["a"] = 0.5 * (hud_opacity_factor / 255)
    }

    colors.bright_green = {
        ["r"] = 137/255,
        ["g"] = 252/255,
        ["b"] = 0/255,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.magenta = {
        ["r"] = 209/255,
        ["g"] = 29/255,
        ["b"] = 136/255,
        ["a"] = 0.5 * (hud_opacity_factor / 255)
    }

    colors.bright_magenta = {
        ["r"] = 209/255,
        ["g"] = 29/255,
        ["b"] = 136/255,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.purple = {
        ["r"] = 169 / 255,
        ["g"] = 0,
        ["b"] = 59 / 255,
        ["a"] = 0.4 * (hud_opacity_factor / 255)
    }

    colors.bright_purple = {
        ["r"] = 169 / 255,
        ["g"] = 0,
        ["b"] = 59 / 255,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.red = {
        ["r"] = 255.0/255,
        ["g"] = 51.0/255,
        ["b"] = 102.0/255,
        ["a"] = 0.2 * (hud_opacity_factor / 255)
    }

    colors.bright_red = {
        ["r"] = 255.0/255,
        ["g"] = 51.0/255,
        ["b"] = 102.0/255,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.orange_red = {
        ["r"] = 223 / 255,
        ["g"] = 98 / 255,
        ["b"] = 101 / 255,
        ["a"] = 0.4 * (hud_opacity_factor / 255)
    }

    colors.bright_orange_red = {
        ["r"] = 223 / 255,
        ["g"] = 98 / 255,
        ["b"] = 101 / 255,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.lime = {
        ["r"] = 182 / 255,
        ["g"] = 247 / 255,
        ["b"] = 29 / 255,
        ["a"] = 0.1 * (hud_opacity_factor / 255)
    }

    colors.bright_lime = {
        ["r"] = 182 / 255,
        ["g"] = 247 / 255,
        ["b"] = 29 / 255,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.sinopia = {
        ["r"] = 218 / 255,
        ["g"] = 27 / 255,
        ["b"] = 0,
        ["a"] = 0.5 * (hud_opacity_factor / 255)
    }

    colors.bright_sinopia = {
        ["r"] = 218 / 255,
        ["g"] = 27 / 255,
        ["b"] = 0,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.blue = {
        ["r"] = 55.0/255,
        ["g"] = 172.0/255,
        ["b"] = 215.0/255,
        ["a"] = 0.2 * (hud_opacity_factor / 255)
    }

    colors.bright_blue = {
        ["r"] = 55.0/255,
        ["g"] = 172.0/255,
        ["b"] = 215.0/255,
        ["a"] = 1.0 * (hud_opacity_factor / 255)
    }

    colors.transparent = {
        ["r"] = 0.0,
        ["g"] = 0.0,
        ["b"] = 0.0,
        ["a"] = 0.0
    }

    colors.smoke = {
        ["r"] = 0.2,
        ["g"] = 0.2,
        ["b"] = 0.2,
        ["a"] = 0.3 * (hud_opacity_factor / 255)
    }
end

util.execute_in_os_thread(update_colors)

menu.slider(vscript, "Dash Opacity", {}, "Set the dash opacity.", 0,
            255, hud_opacity_factor, 1,
            function(value)
                hud_opacity_factor = value
                util.execute_in_os_thread(update_colors)
end)

menu.slider(vscript, "Refresh Rate", {}, "Set the refresh rate of your monitor in Hz, e.g. 60", 0,
                150, frame_rate, 1,
                function(value)
                    frame_rate = value
                    not_drifting_delay_frames = 0.5 * frame_rate
                end)

local function radians_to_degrees(radians)
    return radians * (180 / PI)
end

local function degrees_to_radians(degrees)
    return degrees * (PI / 180)
end

local function set_FoV(is_wide)
    SET_GAMEPLAY_CAM_RELATIVE_HEADING(0.0)
    SET_FOLLOW_PED_CAM_VIEW_MODE(2)
    local fov = is_wide and wide_view or narrow_view
    menu.trigger_commands("fovtponfoot " .. fov)
    menu.trigger_commands("fovtpinveh " .. fov)
    util.toast("Wide View: " .. (is_wide and "Active" or "Disabled") .. " (" .. fov .. " degrees)")
end

local function toggle_radar(is_enabled)
    DISPLAY_RADAR(not is_enabled)
end

local function toggle_HUD(is_enabled)
    DISPLAY_HUD(is_enabled)
    FORCE_OFF_WANTED_STAR_FLASH(not is_enabled)
    DISPLAY_CASH(is_enabled)
    DISPLAY_AREA_NAME(is_enabled)
end

local function enforce_radar_zoom()
    SET_RADAR_ZOOM(better_radar_enabled and 1400 or 1400)
    SET_BIGMAP_ACTIVE(false, false)
end

util.on_transition_finished(function()
                                enforce_radar_zoom()
end)

local function toggle_muted_sirens(is_muted)
    local vehicle = GET_VEHICLE_PED_IS_USING(players.user_ped())
    SET_VEHICLE_HAS_MUTED_SIRENS(vehicle, is_muted)
end

-- Function to toggle cover.  Thanks Drizz
local function toggle_cover(is_enabled)
    SET_PLAYER_CAN_USE_COVER(players.user(), is_enabled)
end

local function get_fps_color(fps)
    if fps >= 28 then
        return colors.lime
    elseif fps >= 20 then
        return colors.yellow
    else
        return colors.bright_red
    end
end

local segment_map = {
    ["0"] = {1, 1, 1, 1, 1, 1, 0, 0},
    ["1"] = {0, 1, 1, 0, 0, 0, 0, 0},
    ["2"] = {1, 1, 0, 1, 1, 0, 1, 0},
    ["3"] = {1, 1, 1, 1, 0, 0, 1, 0},
    ["4"] = {0, 1, 1, 0, 0, 1, 1, 0},
    ["5"] = {1, 0, 1, 1, 0, 1, 1, 0},
    ["6"] = {1, 0, 1, 1, 1, 1, 1, 0},
    ["7"] = {1, 1, 1, 0, 0, 0, 0, 0},
    ["8"] = {1, 1, 1, 1, 1, 1, 1, 0},
    ["9"] = {1, 1, 1, 1, 0, 1, 1, 0},
    ["P"] = {1, 1, 0, 0, 1, 1, 1, 0},
    ["R"] = {1, 1, 1, 0, 1, 1, 1, 0},
}

local function draw_segment(x, y, w, h, active, color)
    if active == 1 then
        directx.draw_rect(x, y, w, h, color)

        directx.draw_line(x, y, x + w, y, colors.smoke) -- Top
        directx.draw_line(x + w, y, x + w, y + h, colors.smoke) -- Right
        directx.draw_line(x + w, y + h, x, y + h, colors.smoke) -- Bottom
        directx.draw_line(x, y + h, x, y, colors.smoke) -- Left
    end
end

local function draw_char(char, x, y, scale, color)
    local segments = segment_map[char]
    local char_width, char_height = 0.1 * scale, 0.02 * scale

    local box_padding = 0.02 * scale
    local box_width = char_width + 2 * box_padding
    local box_height = 14 * char_height

    local box_x = x - box_padding - 0.5*box_padding
    local box_y = y - box_padding - 0.5*box_padding

    directx.draw_rect(box_x, box_y, box_width, box_height, colors.red)

    directx.draw_line(box_x, box_y, box_x + box_width, box_y, colors.smoke) -- Top
    directx.draw_line(box_x + box_width, box_y, box_x + box_width, box_y + box_height, colors.smoke) -- Right
    directx.draw_line(box_x + box_width, box_y + box_height, box_x, box_y + box_height, colors.smoke) -- Bottom
    directx.draw_line(box_x, box_y + box_height, box_x, box_y, colors.smoke) -- Left

    -- Top segment
    draw_segment(x, y, char_width, char_height, segments[1], color)
    -- Top-right segment
    draw_segment(x + char_width - char_height, y + char_height, char_height, char_width - char_height, segments[2], color)
    -- Bottom-right segment
    draw_segment(x + char_width - char_height, y + 2 * char_height + char_width - char_height, char_height, char_width - char_height, segments[3], color)
    -- Bottom segment
    draw_segment(x, y + 2 * (char_width - char_height) + 2 * char_height, char_width, char_height, segments[4], color)
    -- Bottom-left segment
    draw_segment(x - char_height, y + 2 * char_height + char_width - char_height, char_height, char_width - char_height, segments[5], color)
    -- Top-left segment
    draw_segment(x - char_height, y + char_height, char_height, char_width - char_height, segments[6], color)
    -- Middle segment
    draw_segment(x, y + char_height + char_width - char_height, char_width, char_height, segments[7], color)
    -- Extra middle segment
    draw_segment(x + char_width / 2 - char_height / 2, y + char_height + char_width - char_height, char_height, char_width - char_height, segments[8], color)
end

local function draw_text(text, x, y, scale, color)
    local char_width = 0.1 * scale
    local char_height = 0.02 * scale
    local spacing = 0.05 * scale
    for i = 1, #text do
        local char = text:sub(i, i)
        local box_padding = 0.02 * scale
        draw_char(char, x + (i - 1) * (char_width + spacing), y, scale, color)
    end
end

local function draw_fps(x, y)
    local fps = util.get_tps()
    local color = get_fps_color(fps)
    directx.draw_text(x, y, tostring(fps) .. " FPS", ALIGN_LEFT, 1.0, color, false)
end

local function draw_fps_bar(x, y, width, height)
    local max_fps = 30
    local fps = math.min(FLOOR(util.get_tps()), max_fps)
    local bar_width = (fps / max_fps) * width
    local color = get_fps_color(fps)
    directx.draw_rect(x, y, bar_width, height, color)
end


function draw_pulsing_filled_rectangle(x, y, width, height, color, pulse_speed, time)
    directx.draw_rect(x, y, width, height, pulsing_color)
end

local function interpolate_color(color1, color2, factor)
    return {
        r = color1.r * (1 - factor) + color2.r * factor,
        g = color1.g * (1 - factor) + color2.g * factor,
        b = color1.b * (1 - factor) + color2.b * factor,
        a = color1.a * (1 - factor) + color2.a * factor
    }
end

local function draw_gauge_background()
    local pos_x = 0.5
    local pos_y = 1.35
    local triangle_side_length = 0.27
    local triangle_color = colors.black
    local border_color = colors.smoke
    local height = triangle_side_length * SQRT_3_2
    local mid_center_x = 0.5
    local center_y = 0.92
    local left_center_x = mid_center_x - triangle_side_length / 2
    local right_center_x = mid_center_x + triangle_side_length / 2

    local triangle_vertices = {
        mid_center_x - triangle_side_length / 2, center_y - height / 2,
        mid_center_x + triangle_side_length / 2, center_y - height / 2,
        mid_center_x, center_y + height / 2
    }

    directx.draw_triangle(
        triangle_vertices[1], triangle_vertices[2],
        triangle_vertices[3], triangle_vertices[4],
        triangle_vertices[5], triangle_vertices[6],
        triangle_color
    )

    directx.draw_line(triangle_vertices[1], triangle_vertices[2], triangle_vertices[3], triangle_vertices[4], border_color)

    local inverted_triangle_vertices = {
        left_center_x + triangle_side_length / 2, center_y + height / 2,
        left_center_x - triangle_side_length / 2, center_y + height / 2,
        left_center_x, center_y - height / 2
    }

    directx.draw_triangle(
        inverted_triangle_vertices[1], inverted_triangle_vertices[2],
        inverted_triangle_vertices[3], inverted_triangle_vertices[4],
        inverted_triangle_vertices[5], inverted_triangle_vertices[6],
        triangle_color
    )

    directx.draw_line(inverted_triangle_vertices[3], inverted_triangle_vertices[4], inverted_triangle_vertices[5], inverted_triangle_vertices[6], border_color)

    inverted_triangle_vertices = {
        right_center_x + triangle_side_length / 2, center_y + height / 2,
        right_center_x - triangle_side_length / 2, center_y + height / 2,
        right_center_x, center_y - height / 2
    }

    directx.draw_triangle(
        inverted_triangle_vertices[1], inverted_triangle_vertices[2],
        inverted_triangle_vertices[3], inverted_triangle_vertices[4],
        inverted_triangle_vertices[5], inverted_triangle_vertices[6],
        triangle_color
    )

    directx.draw_line(inverted_triangle_vertices[1], inverted_triangle_vertices[2], inverted_triangle_vertices[5], inverted_triangle_vertices[6], border_color)
end

local function draw_numeric_display(value, pos_x, pos_y, scale, color)
    directx.draw_text(pos_x, pos_y, string.format("%03d", value),
                      ALIGN_CENTRE, scale, color, true)
end

local function draw_segment_bar_speed(pos_x, pos_y, width, height, segments, active_segments)
    local segment_height = (height / segments) * 1.5
    local curve_intensity = 0.7
    local shift_intensity = 0.6

    for i = 0, segments - 1 do
        local y = pos_y - (i * segment_height) - (segment_height * 1.5)
        local x_offset = (i / segments)^3 * curve_intensity - 0.1
        local segment_width = width * (1 - (i / segments) * 0.8)
        local x_shift = (i / segments)^3 * shift_intensity
        if i < active_segments then
            local color_factor = i / (segments - (segments * 0.05))
            local segment_color = interpolate_color(colors.bright_blue, colors.bright_lime, color_factor)
            directx.draw_rect(pos_x + x_offset - x_shift, y,
                              segment_width, segment_height - 0.005,
                              segment_color)
        else
            directx.draw_rect(pos_x + x_offset - x_shift,
                              y, segment_width, segment_height - 0.005, colors.smoke)
        end
    end
end

local function draw_gauge_speed(pos_x, pos_y, value, max_value)
    local bar_width = 0.1
    local bar_height = 0.1
    local segments = 20
    local active_segments = CEIL((value / max_value) * segments)

    draw_segment_bar_speed(pos_x, pos_y, bar_width, bar_height, segments, active_segments)

    local num_pos_y = pos_y + bar_height - 0.2
    local padded_value = string.format("%03d", value)
    draw_text(padded_value, pos_x,
              num_pos_y - 0.01, 0.13, colors.bright_red)
    directx.draw_text(pos_x + 0.024, num_pos_y + 0.035, "KPH", ALIGN_CENTRE, 0.6, colors.bright_gold, true)
end

local function draw_segment_bar_rpm(pos_x, pos_y, width, height, segments, active_segments)
    local segment_width = (width / segments) * 1.25
    local curve_intensity = 0.12
    local shift_intensity = 0.06
    local pulse_speed = 10

    for i = 0, segments - 1 do
        local x = pos_x + (i * segment_width) - (segment_width * 1.5)
        local segment_height = - height * (0.8 + (i / segments) * 0.5)

        local segment_iterator = radians_to_degrees((i / segments) * PI)
        local y_offset = - COS(segment_iterator) * curve_intensity - 0.1
        local y_shift = - COS(segment_iterator) * shift_intensity

        if i < active_segments then
            local color_factor = i / (segments - (segments * 0.001))
            local segment_color = interpolate_color(colors.bright_blue, colors.bright_purple, color_factor)

            if active_segments >= segments then
                local pulse_angle = radians_to_degrees(os.clock() * pulse_speed)
                local pulse_factor = (SIN(pulse_angle) + 1) / 2
                segment_color = interpolate_color(segment_color, colors.bright_red, pulse_factor)
            end
            directx.draw_rect(x, pos_y + y_offset - y_shift,
                              segment_width - 0.005,
                              segment_height, segment_color)
        else
            directx.draw_rect(x, pos_y + y_offset - y_shift,
                              segment_width - 0.005,
                              segment_height, colors.smoke)
        end
    end
end

local function draw_gauge_rpm(pos_x, pos_y, value, max_value)
    local bar_width = 0.1
    local bar_height = 0.025
    local segments = 20
    local active_segments = CEIL((value / max_value) * segments)

    draw_segment_bar_rpm(pos_x, pos_y, bar_width, bar_height, segments, active_segments)
    local num_pos_y = pos_y + bar_height - 0.15
    local padded_value = string.format("%03d", value)
    draw_text(padded_value, pos_x - 0.02,
              num_pos_y - 0.01, 0.11, colors.bright_red)
    directx.draw_text(pos_x, num_pos_y + 0.03, "% REV", ALIGN_CENTRE, 0.6, colors.bright_gold, true)
end

local function draw_segmented_vertical_bar(value, max_value, x, y,
                                           width, height, start_color,
                                           end_color, back_color, segments, gap)
    local bar_height = (value / max_value) * height
    local segment_height = (height / segments) - gap

    directx.draw_rect(x, y, width, height, back_color)

    for i = 0, segments - 1 do
        local segment_y = y + height - (i * (segment_height + gap)) - segment_height
        if segment_y >= y + height - bar_height then
            local color_factor = i / (segments - 1)

            local segment_color = interpolate_color(start_color, end_color, color_factor)
            directx.draw_rect(x, segment_y, width, segment_height, segment_color)
        else
            break
        end
    end
end

local function update_v_history(history, v)
    table.insert(history, v)
    if #history > history_size then
        table.remove(history, 1)
    end
end

local function calculate_average(history)
    local sum = 0
    for _, v in ipairs(history) do
        sum = sum + v
    end
    return sum / #history
end

local drift_difficulty_levels = {
    easy = 20.0,
    normal = 30.0,
    hard = 45.0
}

local current_drift_difficulty = drift_difficulty_levels.normal

local easy_toggle, normal_toggle, hard_toggle

local function set_easy()
    current_drift_difficulty = drift_difficulty_levels.easy
    menu.set_value(normal_toggle, false)
    menu.set_value(hard_toggle, false)
end

local function set_normal()
    current_drift_difficulty = drift_difficulty_levels.normal
    menu.set_value(easy_toggle, false)
    menu.set_value(hard_toggle, false)
end

local function set_hard()
    current_drift_difficulty = drift_difficulty_levels.hard
    menu.set_value(easy_toggle, false)
    menu.set_value(normal_toggle, false)
end

easy_toggle = menu.toggle(vscript, "Drift Difficulty: Easy", {}, "", function(state)
    if state then set_easy() end
end)

normal_toggle = menu.toggle(vscript, "Drift Difficulty: Normal", {}, "", function(state)
    if state then set_normal() end
end, true)

hard_toggle = menu.toggle(vscript, "Drift Difficulty: Hard", {}, "", function(state)
    if state then set_hard() end
end)

local function get_drift_angle(vx, vy)
    local theta = ATAN2(vx, vy)
    return ABSF(FLOOR(theta))
end

local function get_drift()
    local car = entities.get_user_vehicle_as_handle(true)

    local speed_vector = GET_ENTITY_SPEED_VECTOR(car, true)
    local speed = FLOOR(GET_ENTITY_SPEED(car) * 3.6)
    local vx = speed_vector.x
    local vy = speed_vector.y

    update_v_history(vx_history, vx)
    update_v_history(vy_history, vy)

    local avg_vx = calculate_average(vx_history)
    local avg_vy = calculate_average(vy_history)

    local drift_angle = get_drift_angle(avg_vx, avg_vy)
    if min_drift_speed > speed then
        drift_angle = 0
    end
    local is_drifting = drift_angle > current_drift_difficulty

    if is_drifting and not prev_is_drifting then
        drift_start_time = util.current_unix_time_seconds()
    end

    if is_drifting then
        prev_is_drifting = true
        frames_not_drifting = 0
    elseif drift_angle <= current_drift_difficulty / 3 then
        frames_not_drifting = frames_not_drifting + 1
        if frames_not_drifting >= not_drifting_delay_frames then
            prev_is_drifting = false
        end
    else
        frames_not_drifting = 0
    end
end

local function update_drift_score()
    local car = entities.get_user_vehicle_as_handle(true)
    if prev_is_drifting then
        local current_time = util.current_unix_time_seconds()
        local drift_duration = current_time - drift_start_time

        local speed_vector = GET_ENTITY_SPEED_VECTOR(car, true)
        local vx = speed_vector.x
        local vy = speed_vector.y

        local drift_angle = get_drift_angle(vx, vy)
        local base_score = LOG10(FLOOR(drift_duration * drift_angle))
        base_score = base_score / 10

        local drift_multiplier = 1.0

        if vx > 1.5 * drift_angle then
            drift_multiplier = 1.5
            base_score = base_score * drift_multiplier
            util.toast("Drift Multiplier: " .. drift_multiplier)
        elseif vx > 2.0 * drift_angle then
            drift_multiplier = 2.0
            base_score = base_score * drift_multiplier
            util.toast("Drift Multiplier: " .. drift_multiplier)
        end

        if drift_duration > 10 then
            drift_multiplier = 10 * drift_multiplier
            base_score = base_score * drift_multiplier
            util.toast("Drift Multiplier: " .. drift_multiplier)
        end

        if base_score > 0 then
            current_drift_score = current_drift_score + base_score
        end

        if current_drift_score > highest_drift_score then
            highest_drift_score = current_drift_score
        end
    else
        current_drift_score = 0
    end
end

local function draw_hud_extra(vehicle_health, gear)
    local in_car = IS_PED_IN_ANY_VEHICLE(players.user_ped(), false)
    local car = entities.get_user_vehicle_as_handle(true)
    local speed_vector = GET_ENTITY_SPEED_VECTOR(car, true)
    local speed = CEIL(GET_ENTITY_SPEED(car) * 3.6)
    local vx = speed_vector.x
    local vy = speed_vector.y
    local vz = speed_vector.z
    local drift_indicator_radius = 0.003
    local drift_indicator_position = { x = 0.5015, y = 0.834}

    if vy < 0 then
        gear = "R"
    elseif FLOOR(vy) == 0 and in_car then
        gear = "0"
    elseif FLOOR(vy) == 0 and not in_car then
        gear = "P"
    end
    local damage = vehicle_health

    directx.draw_text(0.5, 0.99, "Damage", ALIGN_CENTRE, 0.5, colors.bright_gold, true)
    draw_segmented_vertical_bar(vehicle_health, 1.0, 0.5, 0.90, 0.003, 0.08, colors.bright_red, colors.bright_lime, colors.smoke, 10, 0.002)

    local is_drifting = prev_is_drifting
    update_drift_score()

    local indicator_color = is_drifting and colors.bright_lime or colors.smoke
    directx.draw_circle(drift_indicator_position.x, drift_indicator_position.y, drift_indicator_radius, indicator_color)
    directx.draw_text(drift_indicator_position.x - 0.001, drift_indicator_position.y - 0.015, "Drift", ALIGN_CENTRE, 0.47, colors.bright_gold, true)

    directx.draw_text(0.432, 0.818, "Current Score:", ALIGN_CENTRE, 0.45, colors.bright_gold, true)
    local padded_current_score = string.format("%012d", FLOOR(current_drift_score))
    draw_text(padded_current_score, 0.39, 0.828, 0.05, colors.bright_red)
    directx.draw_text(0.567, 0.818, "High Score:", ALIGN_CENTRE, 0.45, colors.bright_gold, true)
    local padded_high_score = string.format("%012d", FLOOR(highest_drift_score))
    draw_text(padded_high_score, 0.525, 0.828, 0.05, colors.bright_red)

    drift_angle = get_drift_angle(vx, vy)
    if drift_angle == 180 or speed < min_drift_speed then
        drift_angle = 0
    end

    local padded_angle = string.format("%03d", drift_angle)
    directx.draw_text(0.5015, 0.88, "Angle", ALIGN_CENTRE, 0.5, colors.bright_gold, true)
    draw_text(padded_angle, 0.488, 0.85, 0.07, colors.bright_red)


    draw_text(tostring(gear), 0.597, 0.95, 0.10, colors.bright_red)
    directx.draw_text(0.60, 0.99, "Gear", ALIGN_CENTRE, 0.5, colors.bright_gold, true)

end

menu.toggle_loop(vscript, "Dash", { "venabledash" }, "Speedometer/Tachometer &c.", function()
    local car_ptr = entities.get_user_vehicle_as_pointer(true)
    if car_ptr ~= 0 then
        local car = entities.pointer_to_handle(car_ptr)
        local speed = CEIL(GET_ENTITY_SPEED(car) * 3.6)
        local max_speed = menu.get_value(menu.ref_by_path("Vehicle>Movement>Speed Limit (KMH)"))
        local rpm = CEIL(_GET_VEHICLE_CURRENT_REV_RATIO(car) * 100)
        local gear = _GET_VEHICLE_CURRENT_DRIVE_GEAR(car)
        local vehicle_health = GET_ENTITY_HEALTH(car) / GET_ENTITY_MAX_HEALTH(car)

        draw_gauge_background()
        draw_gauge_speed(0.4, 1.0, speed, max_speed)
        draw_gauge_rpm(0.6, 1.025, rpm, 100)
        get_drift()
        draw_hud_extra(vehicle_health, gear)
    end
end)

-- Toggle between 55 and 70 degree FoV
menu.toggle(vscript, "Wide View", { "vwideview" }, "Increase the field of view.",
            function(on)
                set_FoV(on)
            end)


-- Toggle the HUD
menu.toggle(vscript, "Disable HUD", { "vdisablehud" }, "Turn off the HUD.",
            function(is_enabled)
                toggle_HUD(not is_enabled)
            end)


-- Toggle the radar
menu.toggle(vscript, "Disable Radar", { "vdisableradar" }, "Turn off the radar.",
            function(is_enabled)
                toggle_radar(is_enabled)
            end)

-- Toggle menu item for radar zoom
menu.toggle_loop(vscript, "Better Radar", { "vbetterradar" }, "The coverage of big map at the size of little map.",
                 function(on)
                     better_radar_enabled = on
                     enforce_radar_zoom()
                 end)

-- Mute the sirens, keep the lights
menu.toggle(vscript, "Better Bootlicker", { "vbetterbootlicker" }, "Disable the annoying sirens in cop cars.",
            function(on)
                toggle_muted_sirens(on)
            end)

-- Disable cover
menu.toggle(vscript, "Disable Cover", { "vdisablecover" }, "Disable cover (for controller players)",
            function(on)
                toggle_cover(not on)
            end)


-- Show FPS bar
menu.toggle_loop(vscript, "Show FPS Bar", {"vfpsbar"},
                 "",
                 function()
                     local gauge_length = 0.1
                     local gauge_height = 0.0025
                     local x = 0.5 - gauge_length * 0.5
                     local y = 0.99
                     draw_fps_bar(x, y, gauge_length, gauge_height)
                 end)

menu.my_root():action("Update", {}, "The script will automatically check for updates, but you can manually check using this option.", function()
    auto_update_config.check_interval = 0
    if auto_updater.run_auto_update(auto_update_config) then
        util.toast("No updates found")
    end
end)
util.keep_running()
